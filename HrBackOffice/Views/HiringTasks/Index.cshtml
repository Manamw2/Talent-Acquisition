@model HiringTasksViewModel
@{
    ViewData["Title"] = "HR Hiring Tasks";
}

<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center bg-gradient-primary text-white">
            <h2 class="m-0 font-weight-bold">My Tasks</h2>
            
        </div>

        <div class="collapse show" id="filterCollapse">
            <div class="card-body bg-light border-bottom">
                <!-- Filter Form -->
                <form asp-action="Index" method="get" class="mb-2">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="form-group">
                                <label for="searchTerm" class="small font-weight-bold">Search</label>
                                <div class="input-group">
                                    
                                    <input type="text" class="form-control" id="searchTerm" name="searchTerm" value="@Model.SearchTerm" placeholder="Search...">
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label for="status" class="small font-weight-bold">Status</label>
                                <select class="form-control select2" id="status" name="status">
                                    <option value="">All Statuses</option>
                                    @foreach (var status in Model.Statuses)
                                    {
                                        <option value="@status" selected="@(status == Model.Status)">@status</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label for="department" class="small font-weight-bold">Department</label>
                                <select class="form-control select2" id="department" name="department">
                                    <option value="">All Departments</option>
                                    @foreach (var dept in Model.Departments)
                                    {
                                        <option value="@dept.DepartmentId" selected="@(dept.DepartmentId.ToString() == Model.Department)">@dept.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label for="batch" class="small font-weight-bold">Batch</label>
                                <select class="form-control select2" id="batch" name="batch">
                                    <option value="">All Batches</option>
                                    @foreach (var batch in Model.Batches)
                                    {
                                        <option value="@batch.BatchId" selected="@(batch.BatchId.ToString() == Model.Batch)">@batch.BatchName</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-filter"></i>
                            </button>
                            <a asp-action="Index" class="btn btn-outline-secondary">
                                <i class="fas fa-redo"></i>
                            </a>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <div class="card-body">
            <!-- Task Count Summary -->
            <div class="row mb-4">
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-info shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Total Tasks</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.TotalTasks</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-clipboard-list fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-success shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Completed</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.Tasks.Count(t => t.Status == "Completed")</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-warning shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">In Progress</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.Tasks.Count(t => t.Status == "Active")</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-spinner fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                
            </div>

            <!-- Tasks DataTable -->
            <div class="table-responsive">
                <table id="hiringTasksTable" class="table table-striped table-hover border" width="100%" cellspacing="0">
                    <thead class="bg-gray-200">
                        <tr>
                            <th>Batch</th>
                            <th>Stage</th>
                            <th>Department</th>
                            <th>Status</th>
                            <th>Assigned Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var task in Model.Tasks)
                        {
                            <tr>
                                <td>@task.HiringTask.Batch.BatchName</td>
                                <td>@task.HiringTask.HiringStage.Name</td>
                                <td>@task.HiringTask.Batch.Job.Department.Name</td>
                                <td>
                                    @{
                                        string badgeClass = task.Status switch
                                        {
                                            "Completed" => "badge-success",
                                            "In Progress" => "badge-warning",
                                            "Pending" => "badge-info",
                                            "Overdue" => "badge-danger",
                                            _ => "badge-secondary"
                                        };
                                    }
                                    <span class="badge @badgeClass">@task.Status</span>
                                </td>
                                <td>@task.AssignedDate.ToString("yyyy-MM-dd")</td>
                                <td>
                                    <a asp-action="Details" asp-route-id="@task.TaskId" title="View More Details" class="btn btn-info btn-sm">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Custom Pagination -->
            @if (Model.TotalPages > 1)
            {
                <nav aria-label="Page navigation" class="d-flex justify-content-between align-items-center mt-4">
                    <div>
                        <small class="text-muted">Showing @(((Model.CurrentPage - 1) * Model.PageSize) + 1) to @(Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalTasks)) of @Model.TotalTasks entries</small>
                    </div>
                    <ul class="pagination">
                        <!-- First Page -->
                        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = 1, searchTerm = Model.SearchTerm, status = Model.Status, department = Model.Department, batch = Model.Batch })" aria-label="First">
                                <span aria-hidden="true"><i class="fas fa-angle-double-left"></i></span>
                            </a>
                        </li>

                        <!-- Previous Page -->
                        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = Model.CurrentPage - 1, searchTerm = Model.SearchTerm, status = Model.Status, department = Model.Department, batch = Model.Batch })" aria-label="Previous">
                                <span aria-hidden="true"><i class="fas fa-angle-left"></i></span>
                            </a>
                        </li>

                        @{
                            int pagesOnEachSide = 2;
                            int startPage = Math.Max(1, Model.CurrentPage - pagesOnEachSide);
                            int endPage = Math.Min(Model.TotalPages, Model.CurrentPage + pagesOnEachSide);
                        }

                        @if (startPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { page = 1, searchTerm = Model.SearchTerm, status = Model.Status, department = Model.Department, batch = Model.Batch })">1</a>
                            </li>
                            @if (startPage > 2)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }
                        }

                        @for (int i = startPage; i <= endPage; i++)
                        {
                            if (i == Model.CurrentPage)
                            {
                                <li class="page-item active">
                                    <form id="pageJumpForm" method="get" action="@Url.Action("Index")" style="margin:0; padding:0">
                                        <input type="hidden" name="searchTerm" value="@Model.SearchTerm" />
                                        <input type="hidden" name="status" value="@Model.Status" />
                                        <input type="hidden" name="department" value="@Model.Department" />
                                        <input type="hidden" name="batch" value="@Model.Batch" />
                                        <input type="text" name="page"
                                               class="form-control border-0 text-center bg-primary text-white"
                                               style="width: 50px; height: 38px; padding: 0;"
                                               value="@Model.CurrentPage" />
                                    </form>
                                </li>
                            }
                            else
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { page = i, searchTerm = Model.SearchTerm, status = Model.Status, department = Model.Department, batch = Model.Batch })">@i</a>
                                </li>
                            }
                        }

                        @if (endPage < Model.TotalPages)
                        {
                            @if (endPage < Model.TotalPages - 1)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { page = Model.TotalPages, searchTerm = Model.SearchTerm, status = Model.Status, department = Model.Department, batch = Model.Batch })">@Model.TotalPages</a>
                            </li>
                        }

                        <!-- Next Page -->
                        <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = Model.CurrentPage + 1, searchTerm = Model.SearchTerm, status = Model.Status, department = Model.Department, batch = Model.Batch })" aria-label="Next">
                                <span aria-hidden="true"><i class="fas fa-angle-right"></i></span>
                            </a>
                        </li>

                        <!-- Last Page -->
                        <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = Model.TotalPages, searchTerm = Model.SearchTerm, status = Model.Status, department = Model.Department, batch = Model.Batch })" aria-label="Last">
                                <span aria-hidden="true"><i class="fas fa-angle-double-right"></i></span>
                            </a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize DataTable with minimal configuration
            $('#hiringTasksTable').DataTable({
                "paging": false,       // We use custom pagination
                "ordering": true,      // Allow column sorting
                "info": false,         // Hide default "Showing X of Y entries"
                "searching": false,    // We use custom search
                "autoWidth": false,    // Better control over column widths
                "responsive": true,    // Responsive behavior
                "columnDefs": [
                    { "orderable": false, "targets": 5 } // Disable sorting on Actions column
                ],
                "language": {
                    "emptyTable": "<div class='text-center p-4'><i class='fas fa-clipboard-list fa-3x text-gray-300 mb-3'></i><br>No tasks found matching your criteria</div>"
                }
            });

            // Initialize Select2 for better dropdown UX
            $('.select2').select2({
                width: '100%',
                theme: 'bootstrap4'
            });

            // Handle Enter key for page jump form
            var form = document.getElementById('pageJumpForm');
            if (form) {
                var input = form.querySelector('input[name="page"]');
                if (input) {
                    input.addEventListener('keypress', function (e) {
                        if (e.key === 'Enter') {
                            e.preventDefault();
                            var val = parseInt(this.value);
                            if (isNaN(val) || val < 1) {
                                this.value = 1;
                            } else if (val > @Model.TotalPages) {
                                this.value = @Model.TotalPages;
                            }
                            form.submit();
                        }
                    });

                    // Focus out also submits the form
                    input.addEventListener('blur', function () {
                        var val = parseInt(this.value);
                        if (isNaN(val) || val < 1) {
                            this.value = 1;
                        } else if (val > @Model.TotalPages) {
                            this.value = @Model.TotalPages;
                        }
                        form.submit();
                    });
                }
            }

            // Initialize tooltips
            $('[data-toggle="tooltip"]').tooltip();
        });
    </script>
}
<style>
    .badge{
        --bs-badge-color: black;
    }
</style>