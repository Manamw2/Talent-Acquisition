@model ProfilePageViewModel
@{
    ViewBag.Title = "User Dashboard";
    Layout = "_profileLayout";
}

@{
    ViewBag.Title = "User Dashboard";
}

<div class="tab-content" id="userTabs">
    <div class="tab-pane fade show active" id="user-info" role="tabpanel" aria-labelledby="user-info-tab">
        @Html.Partial("_UserInfo", Model.ProfileInfoVM)
    </div>
    <div class="tab-pane fade" id="user-applications" role="tabpanel" aria-labelledby="user-applications-tab">
        @Html.Partial("_UserApplications", Model.ApplicationVMs)
    </div>
    <div class="tab-pane fade" id="user-settings" role="tabpanel" aria-labelledby="user-settings-tab">
        @Html.Partial("_UserSettings", Model.ChangePasswordViewModel)
    </div>
</div>


@section Scripts {
    <script src="~/js/profile.js"></script>
    <script>
        $(document).ready(function () {
            $('.nav-link').on('click', function (e) {
                e.preventDefault();
                var tab = $(this).data('tab');
                $('.nav-link').removeClass('active');
                $(this).addClass('active');
                $('.tab-pane').removeClass('show active');
                $('#' + tab).addClass('show active');
            });
        });
    </script>
    <script>
        function togglePassword(inputId) {
            const passwordInput = document.getElementById(inputId);
            const button = passwordInput.nextElementSibling;
            const icon = button.querySelector('i');

            if (passwordInput.type === "password") {
                passwordInput.type = "text";
                icon.classList.replace("bi-eye", "bi-eye-slash");
            } else {
                passwordInput.type = "password";
                icon.classList.replace("bi-eye-slash", "bi-eye");
            }
        }
        // Disable the register button after the first click
        document.getElementById("save-changes").addEventListener("click", function (e) {
            this.disabled = true; // Disable the button
            this.innerText = "Saving Changes..."; // Optionally change the button text
            this.form.submit(); // Submit the form
        });
    </script>
    <script>
        // Function to determine the badge class based on status
        function getStatusBadgeClass(Status) {
            switch (Status) {
                case "Applied":
                    return "text-warning";
                case "Approved":
                    return "text-success";
                case "Rejected":
                    return "text-danger";
                default:
                    return "text-info";
            }
        }

        // Get the status from the span element
        const Status = document.getElementById('statusBadge').textContent;

        // Apply the appropriate badge class
        const badgeElement = document.getElementById('statusBadge');
        badgeElement.classList.add(getStatusBadgeClass(Status));
    </script>
    <partial name="_ValidationScriptsPartial" />
}
