@model X.PagedList.IPagedList<UserViewModel>
@using X.PagedList.Mvc.Core

<div class="container-fluid px-4">
    <h1 class="mt-4 mb-4">Applicant Management</h1>

    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <div>
                <i class="fas fa-briefcase me-2"></i>
                <span class="font-weight-bold">Applicant Listings</span>
            </div>
            <a asp-action="AddApplicant" class="btn btn-primary">
                <i class="fas fa-plus-circle me-1"></i> Create New Applicant
            </a>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-text bg-light">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" id="searchBox" class="form-control" placeholder="Search applicants...">
                    </div>
                </div>
            </div>

            <div id="searchResults">
                @if (Model.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover border">
                            <thead class="table-light">
                                <tr>
                                    <th>User Name</th>
                                    <th>Email</th>
                                    <th>Roles</th>
                                    <th>Education Level</th>
                                    <th>English Level</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in Model)
                                {
                                    <tr ondblclick="viewApplicantProfile('@user.Id')" style="cursor: pointer;">
                                        <td><span class="badge bg-primary">@user.DisplayName</span></td>
                                        <td>@user.Email</td>
                                        <td>
                                            @if (user.Roles.Any())
                                            {
                                                @foreach (var role in user.Roles)
                                                {
                                                    <span class="badge bg-secondary">@role</span>
                                                }
                                            }
                                            else
                                            {
                                                <span class="badge bg-warning">No Roles</span>
                                            }
                                        </td>
                                        <td>@user.EducationLevel</td>
                                        <td>@user.EnglishProficiencyLevel</td>
                                        <td>
                                            <form asp-action="DeleteApplicant" method="post" id="deleteForm">
                                                @Html.AntiForgeryToken()
                                            </form>

                                            <button type="button" class="btn btn-sm btn-danger"
                                                    onclick="confirmDeleteUser('@user.Id', '@user.UserName')">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                            <button type="button" class="btn btn-primary assign-job-btn" data-applicant-id="@user.Id" data-applicant-name="@user.DisplayName">
                                                Assign Job
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <!-- Display this message when no applicants are found -->
                    <div class="alert alert-warning text-center p-4">
                        <i class="fas fa-exclamation-circle fa-2x mb-2"></i>
                        <h5>No applicants found</h5>
                        <p>There are currently no applicants in the system.</p>
                        <a asp-action="AddApplicant" class="btn btn-primary">
                            <i class="fas fa-plus-circle"></i> Add New Applicant
                        </a>
                    </div>
                }
            </div>

            <!-- Pagination Controls -->
            @if (Model.Any())
            {
                <div class="d-flex justify-content-center mt-4">
                    @Html.PagedListPager(Model, page => Url.Action("Index", new { page, searchQuery = Context.Request.Query["searchQuery"] }))
                </div>
            }
        </div>
    </div>
</div>
<!-- Modal -->
<div class="modal fade" id="assignJobModal" tabindex="-1" role="dialog" aria-labelledby="assignJobModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="assignJobModalLabel">Assign Job to <span id="applicantName"></span></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="assignJobForm">
                    <input type="hidden" id="userId" name="userId" />

                    <div class="form-group">
                        <label for="jobId">Available Jobs</label>
                        <select class="form-control" id="jobId" name="jobId" required>
                            <option value="">-- Select a job --</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="reason">Reason for Adding</label>
                        <select class="form-control" id="reason" name="reason" required>
                            <option value="">-- Select a reason --</option>
                            <option value="Internal referral">Internal referral</option>
                            <option value="Resume received offline">Resume received offline</option>
                            <option value="Career fair candidate">Job fair candidate</option>
                            <option value="Reapplication">Reapplication</option>
                            <option value="HR initiative">HR initiative</option>
                        </select>
                    </div>

                    <div class="form-group" id="referralNameGroup" style="display: none;">
                        <label for="referralName">Referred by</label>
                        <input type="text" class="form-control" id="referralName" name="referralName" placeholder="Enter employee name">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="submitAssignJob">Assign Job</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        let searchTimeout;

        document.getElementById('searchBox').addEventListener('input', function (e) {
            clearTimeout(searchTimeout);
            const query = e.target.value;

            searchTimeout = setTimeout(() => {
                if (query.length > 0) {
                    window.location.href = `/Applicant/Index?searchQuery=${encodeURIComponent(query)}`;
                } else {
                    window.location.href = '/Applicant/Index';
                }
            }, 500); // Debounce for 500ms
        });

        function confirmDeleteUser(id, name) {
            if (confirm(`Are you sure you want to delete ${name}?`)) {
                fetch(`/Applicant/DeleteApplicant`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded",
                        "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: `id=${id}`
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert(data.message);
                            location.reload(); // Refresh page after deletion
                        } else {
                            alert("Error deleting applicant.");
                        }
                    })
                    .catch(error => console.error("Error:", error));
            }
        }

        function viewApplicantProfile(id) {
            if (id) {
                window.location.href = `/Job/ApplicantProfile?userId=${id}`;
            }
        }

        // Set search box value from URL parameter on page load
        document.addEventListener('DOMContentLoaded', function () {
            const urlParams = new URLSearchParams(window.location.search);
            const searchQuery = urlParams.get('searchQuery');
            if (searchQuery) {
                document.getElementById('searchBox').value = searchQuery;
            }
        });
    </script>
    <script>
        $(document).ready(function () {
            // Show modal when the assign job button is clicked
            $('.assign-job-btn').click(function () {
                var applicantId = $(this).data('applicant-id');
                var applicantName = $(this).data('applicant-name');

                $('#userId').val(applicantId);
                $('#applicantName').text(applicantName);

                // Clear previous selections
                $('#jobId').html('<option value="">-- Select a job --</option>');
                $('#reason').val('');
                $('#referralName').val('');
                $('#referralNameGroup').hide();

                // Load available jobs for this applicant
                loadAvailableJobs(applicantId);

                $('#assignJobModal').modal('show');
            });

            // Show/hide referral name field based on reason selection
            $('#reason').change(function () {
                if ($(this).val() === 'Internal referral') {
                    $('#referralNameGroup').show();
                    $('#referralName').attr('required', 'required');
                } else {
                    $('#referralNameGroup').hide();
                    $('#referralName').removeAttr('required');
                }
            });

            // Submit form
            $('#submitAssignJob').click(function () {
                // Validate form
                if (!validateForm()) {
                    return;
                }

                var formData = {
                    userId: $('#userId').val(),
                    jobId: $('#jobId').val(),
                    reason: $('#reason').val(),
                    referralName: $('#reason').val() === 'Internal referral' ? $('#referralName').val() : null
                };

                $.ajax({
                    url: '/Applicant/AssignJob',
                    type: 'POST',
                    data: JSON.stringify(formData),
                    contentType: 'application/json',
                    success: function (response) {
                        toastr.success('Job successfully assigned to applicant');
                        $('#assignJobModal').modal('hide');
                        // Refresh applicant list if needed
                        // location.reload();
                    },
                    error: function (xhr) {
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            toastr.error(xhr.responseJSON.message);
                        } else {
                            toastr.error('An error occurred while assigning the job');
                        }
                    }
                });
            });

            function loadAvailableJobs(applicantId) {
                $.ajax({
                    url: '/Applicant/GetAvailableJobs',
                    type: 'GET',
                    data: { userId: applicantId },
                    success: function (jobs) {
                        var options = '<option value="">-- Select a job --</option>';
                        $.each(jobs, function (i, job) {
                            options += '<option value="' + job.id + '">' + job.title + '</option>';
                        });
                        $('#jobId').html(options);
                    },
                    error: function () {
                        toastr.error('Failed to load available jobs');
                    }
                });
            }

            function validateForm() {
                var isValid = true;

                if (!$('#jobId').val()) {
                    toastr.error('Please select a job');
                    isValid = false;
                }

                if (!$('#reason').val()) {
                    toastr.error('Please select a reason');
                    isValid = false;
                }

                if ($('#reason').val() === 'Internal referral' && !$('#referralName').val()) {
                    toastr.error('Please enter the referral name');
                    isValid = false;
                }

                return isValid;
            }
        });
    </script>
}
