@model IEnumerable<JobViewModel>

@{
    ViewData["Title"] = "Job Board";
    int currentPage = ViewBag.CurrentPage ?? 1;
    int totalPages = ViewBag.TotalPages ?? 1;
}

<div class="container-fluid">
    <div class="row">
        <!-- Left Sidebar -->
        <div class="col-md-3 border-end p-4">
            <h5 class="mb-4">Latest Jobs</h5>
            @if (!Model.Any())
            {
                <div class="alert alert-info" role="alert">
                    No jobs available at the moment. Please check back later.
                </div>
            }
            else
            {
                <div class="list-group">
                    @foreach (var job in Model)
                    {
                        <a href="#" class="list-group-item list-group-item-action job-card"
                           data-job-id="@job.JobId"
                           data-job-title="@job.Title"
                           data-job-location="@job.DepartmentName"
                           data-job-description="@job.Description"
                           data-job-application-count="@job.ApplicationCount"
                           data-job-type="@job.JobType">
                            <h6 class="mb-1">@job.Title</h6>
                            <div class="job-location">📍 SoftTrend Headquarter</div>
                            <div class="mb-1">@job.DepartmentName</div>
                            <div class="category-tag mt-1">Valid till: @job.EndDate</div>
                        </a>
                    }
                </div>
                <br />
                <!-- Pagination Controls -->
                <nav aria-label="Page navigation">
                    <ul class="pagination custom-pagination">
                        <!-- Previous Button -->
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = currentPage - 1 })">Previous</a>
                        </li>

                        <!-- Page Numbers -->
                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                            </li>
                        }

                        <!-- Next Button -->
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = currentPage + 1 })">Next</a>
                        </li>
                    </ul>
                </nav>
            }
        </div>

        <!-- Main Content -->
        <div class="col-md-6 p-4">
            <div class="job-detail-card">
                @if (Model.Any())
                {
                    var firstJob = Model.First();
                    <div class="d-flex justify-content-between align-items-start mb-4">
                        <h4 id="job-title">@firstJob.Title</h4>
                        <button id="applyButton" data-job-id="@firstJob.JobId" class="btn btn-primary">
                            Apply for this Job
                        </button>
                    </div>
                    <div class="job-description" id="job-description">
                        <h5>Description:</h5>
                        <hr />
                        <div id="description-content">
                            @if (Model.Any())
                            {
                                @Html.Raw(Model.First().Description)
                            }
                        </div>
                    </div>
                    <div class="mt-3">
                        <span class="badge bg-info">@firstJob.ApplicationCount Applications</span>
                        <span class="badge bg-secondary ms-2">@firstJob.JobType</span>
                    </div>
                }
                else
                {
                    <div class="alert alert-info" role="alert">
                        No jobs available at the moment. Please check back later.
                    </div>
                }
            </div>
        </div>

        <!-- Right Sidebar -->
        <div class="col-md-3 border-start p-4">
            <h5 class="mb-4">Filter by Job Type</h5>
            <select class="form-select filter-dropdown" id="job-type-filter">
                <option value="all">All</option>
                @foreach (JobType jobType in Enum.GetValues(typeof(JobType)))
                {
                    <option value="@jobType.ToString().ToLower()">@jobType</option>
                }
            </select>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
   <script>
       $(document).ready(function () {
    $("#applyButton").click(function () {
        var jobId = $(this).data("job-id");
        var baseUrl = window.location.origin + '/TalentAcquisition/Applicants/ApplyForJob';

        $.ajax({
            url: baseUrl,
            type: 'GET',
            contentType: 'application/x-www-form-urlencoded',
            data: {
                jobId: parseInt(jobId),
            },
            success: function (response) {
                if (response.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: response.message,
                        confirmButtonText: 'OK'
                    });
                } else {
                    // For unauthenticated users
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Applicant not found. Please log in.',
                        showCancelButton: true,
                        confirmButtonText: 'Login',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/Identity/Account/Login';
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: "An error occurred: " + xhr.responseText,
                    confirmButtonText: 'OK'
                });
                console.log("XHR:", xhr);
            }
        });
    });
});

   </Script>
 <script>
            console.log("Document is ready!"); // Check if jQuery is working

            // Handle click event on job cards
            $('.job-card').on('click', function (e) {
                e.preventDefault(); // Prevent default link behavior
                console.log("Job card clicked!"); // Check if the click event is firing

                // Remove the 'selected-job' class from all job cards
                $('.job-card').removeClass('selected-job');

                // Add the 'selected-job' class to the clicked job card
                $(this).addClass('selected-job');

                // Optional: Scroll the selected job card into view
                this.scrollIntoView({ behavior: 'smooth', block: 'center' });
            });
   
            // Handle click event on job cards
            $('.job-card').off('click').on('click', function (e) {
                e.preventDefault();

                // Remove the 'selected-job' class from all job cards
                $('.job-card').removeClass('selected-job');
                // Add the 'selected-job' class to the clicked job card
                $(this).addClass('selected-job');

                // Get job details from data attributes
                const jobId = $(this).data('job-id');
                const jobTitle = $(this).data('job-title');
                const jobDescription = $(this).data('job-description');
                const jobApplicationCount = $(this).data('job-application-count');
                const jobType = $(this).data('job-type');

                // Update the middle section with the clicked job's details
                $('#job-title').text(jobTitle);

                // Clear and update the job description content only
                $('#description-content').empty().html(jobDescription);

                // Update the badges
                $('.badge.bg-info').text(`${jobApplicationCount} Applications`);
                $('.badge.bg-secondary').text(jobType);

                // Update the Apply button's data-job-id attribute
                $('#applyButton').attr('data-job-id', jobId);

                console.log('Updated job description for job:', jobId); // Debug log
            });

            // Handle job type filtering
            $('#job-type-filter').off('change').on('change', function () {
                const selectedJobType = $(this).val().toLowerCase();
                $('.job-card').each(function () {
                    const jobType = $(this).data('job-type').toLowerCase();
                    $(this).toggle(selectedJobType === 'all' || jobType === selectedJobType);
                });
            });
        });

    </script>
}

<style>
    .selected-job {
        border: 3px solid #8f1412 !important;
        background-color: #ebeada;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .custom-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 5px;
        text-align: center;
    }

        .modal-content .btn {
            margin: 10px;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
        }

    .btn-outline-light {
        background: transparent;
        border: 1px solid #666;
        color: #666;
        text-decoration: none;
        display: inline-block;
    }

        .btn-outline-light:hover {
            background: #666;
            color: white;
        }
</style>