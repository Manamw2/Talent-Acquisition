@model IEnumerable<Batch>
@{
    int currentPage = ViewBag.CurrentPage ?? 1;
    int totalPages = ViewBag.TotalPages ?? 1;
}
<div class="container-fluid px-4">
    <h1 class="mt-4 mb-4">Batch Management</h1>

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <div>
                <i class="fas fa-calendar-alt me-2"></i>
                <span class="font-weight-bold">Batch Listings</span>
            </div>
            <a asp-action="Create" class="btn btn-primary">
                <i class="fas fa-plus-circle me-1"></i> Create New Batch
            </a>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-text bg-light">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" id="searchBox" class="form-control" placeholder="Search batches...">
                    </div>
                </div>
            </div>
            @if (Model.Any())
            {
                <div class="table-responsive">
                <table class="table table-hover border">
                    <thead class="table-light">
                        <tr>
                            <th><i class="fas fa-tag me-1"></i>Name</th>
                            <th><i class="fas fa-calendar me-1"></i>Start Date</th>
                            <th><i class="fas fa-calendar-check me-1"></i>End Date</th>
                            <th><i class="fas fa-clock me-1"></i>Status</th>
                            <th class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="batchTable">
                        @foreach (var batch in Model)
                        {
                            <tr>
                                <td class="align-middle">@batch.BatchName</td>
                                <td class="align-middle">@batch.StartDate.ToShortDateString()</td>
                                <td class="align-middle">@batch.EndDate.ToShortDateString()</td>
                                <td class="align-middle">
                                    @{
                                        var today = DateTime.Today;
                                        var status = batch.StartDate > today ? "Upcoming" :
                                        batch.EndDate < today ? "Completed" : "Active";
                                        var badgeClass = status == "Active" ? "success" :
                                        status == "Upcoming" ? "primary" : "secondary";
                                    }
                                    <span class="badge bg-@badgeClass">@status</span>
                                </td>
                                <td class="text-center">
                                    <div class="btn-group" role="group">
                                        <a asp-action="Edit" asp-route-id="@batch.BatchId"
                                           class="btn btn-sm btn-primary">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button type="button" class="btn btn-sm btn-danger"
                                                onclick="confirmDelete(@batch.BatchId)">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
                <!-- Pagination -->
                
            }
            else
            {
                <!-- Display this message when no jobs are found -->
                <div class="alert alert-warning text-center p-4">
                    <i class="fas fa-exclamation-circle fa-2x mb-2"></i>
                    <h5>No Batches available</h5>
                    <p>There are currently no job listings. Create a new Batch now!</p>
                    <a asp-action="Create" class="btn btn-primary">
                        <i class="fas fa-plus-circle"></i> Create Batch
                    </a>
                </div>
            }
            @if (Model.Any())
            {
                <nav aria-label="Page navigation" class="d-flex justify-content-center mt-4">
                    <ul class="pagination">
                        <!-- First Page -->
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = 1 })" aria-label="First">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>

                        <!-- Previous Page -->
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = currentPage - 1 })" aria-label="Previous">
                                <span aria-hidden="true">&lsaquo;</span>
                            </a>
                        </li>

                        @{
                            // Simplified: just show a few pages
                            int pagesOnEachSide = 1;
                            int startPage = Math.Max(1, currentPage - pagesOnEachSide);
                            int endPage = Math.Min(totalPages, currentPage + pagesOnEachSide);
                        }

                        @for (int i = startPage; i <= endPage; i++)
                        {
                            if (i == currentPage)
                            {
                                <li class="page-item active">
                                    <!-- Simple form with just the essential elements -->
                                    <form id="pageJumpForm" method="get" action="@Url.Action("Index")" style="margin:0; padding:0">
                                        <input type="hidden" name="searchQuery" value="@ViewBag.SearchQuery" />
                                        <input type="text" name="page"
                                               class="form-control border-0 text-center bg-primary text-white"
                                               style="width: 40px; height: 38px; padding: 0;"
                                               value="@currentPage" />
                                    </form>
                                </li>
                            }
                            else
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                                </li>
                            }
                        }

                        @if (endPage < totalPages)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>

                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { page = totalPages })">@totalPages</a>
                            </li>
                        }

                        <!-- Next Page -->
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = currentPage + 1 })" aria-label="Next">
                                <span aria-hidden="true">&rsaquo;</span>
                            </a>
                        </li>

                        <!-- Last Page -->
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = totalPages })" aria-label="Last">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>

                <div class="text-center mt-2">
                    <small>@currentPage of @totalPages pages (@ViewBag.TotalItems items)</small>
                </div>
            }

         
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this batch? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <a href="" id="deleteLink" class="btn btn-danger">Delete</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Minimal JavaScript - just handle Enter key and limit to document ready
        document.addEventListener('DOMContentLoaded', function () {
            var form = document.getElementById('pageJumpForm');
            if (form) {
                var input = form.querySelector('input[name="page"]');
                if (input) {
                    // Only handle Enter key press
                    input.addEventListener('keypress', function (e) {
                        if (e.key === 'Enter') {
                            e.preventDefault();
                            // Simple validation to prevent server errors
                            var val = parseInt(this.value);
                            if (isNaN(val) || val < 1) {
                                this.value = 1;
                            } else if (val > @totalPages) {
                                this.value = @totalPages;
                            }
                            form.submit();
                        }
                    });
                }
            }
        });
    </script>
    <script>
        // Search functionality
        document.getElementById("searchBox").addEventListener("keyup", function () {
            let searchValue = this.value.toLowerCase();
            let rows = document.querySelectorAll("#batchTable tr");
            rows.forEach(row => {
                let batchName = row.cells[0].innerText.toLowerCase();
                row.style.display = batchName.includes(searchValue) ? "" : "none";
            });
        });

        // Delete confirmation
        function confirmDelete(batchId) {
            var deleteLink = document.getElementById('deleteLink');
            deleteLink.href = '@Url.Action("Delete")/' + batchId;
            var deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            deleteModal.show();
        }
    </script>
}