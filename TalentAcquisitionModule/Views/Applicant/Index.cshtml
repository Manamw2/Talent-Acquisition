@model IEnumerable<JobViewModel>

@{
    ViewData["Title"] = "Job Board";
    int currentPage = ViewBag.CurrentPage ?? 1;
    int totalPages = ViewBag.TotalPages ?? 1;
}

<div class="container-fluid">
    <div class="row">
        <!-- Left Sidebar -->
        <div class="col-md-3 border-end p-4">
            <h5 class="mb-4">Latest Jobs</h5>
            @if (!Model.Any())
            {
                <div class="alert alert-info" role="alert">
                    No jobs available at the moment. Please check back later.
                </div>
            }
            else
            {
                <div class="list-group">
                    @foreach (var job in Model)
                    {
                        <a href="#" class="list-group-item list-group-item-action job-card"
                           data-job-id="@job.JobId"
                           data-job-title="@job.Title"
                           data-job-location="@job.DepartmentName"
                           data-job-description="@job.Description"
                           data-job-application-count="@job.ApplicationCount"
                           data-job-type="@job.JobType">
                            <h6 class="mb-1">@job.Title</h6>
                            <div class="job-location">📍 SoftTrend Headquarter</div>
                            <div class="mb-1">@job.DepartmentName</div>
                            <div class="category-tag mt-1">Valid till: @job.EndDate</div>
                        </a>
                    }
                </div>
                <br />
                <!-- Pagination Controls -->
                <!-- Pagination Controls -->
                <nav aria-label="Page navigation">
                    <ul class="pagination custom-pagination">
                        <!-- Previous Button -->
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = currentPage - 1 })">Previous</a>
                        </li>

                        <!-- Current Page Number -->
                        <li class="page-item active">
                            <a class="page-link" href="#">@currentPage</a>
                        </li>

                        <!-- Next Button -->
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = currentPage + 1 })">Next</a>
                        </li>
                    </ul>
                </nav>
               
            }
        </div>

        <!-- Main Content -->
        <div class="col-md-6 p-4">
            <div class="job-detail-card">
                @if (Model.Any())
                {
                    var firstJob = Model.First();
                    <div class="d-flex justify-content-between align-items-start mb-4">
                        <h4 id="job-title">@firstJob.Title</h4>
                        <button id="applyButton" data-job-id="@firstJob.JobId" class="btn btn-primary">
                            Apply for this Job
                        </button>
                    </div>
                    <div class="job-description" id="job-description">
                        <h5>Description:</h5>
                        <hr />
                        <div id="description-content">
                            @if (Model.Any())
                            {
                                @Html.Raw(Model.First().Description)
                            }
                        </div>
                    </div>
                    <div class="mt-3">
                        <span class="badge bg-info">@firstJob.ApplicationCount Applications</span>
                        <span class="badge bg-secondary ms-2">@firstJob.JobType</span>
                    </div>
                }
                else
                {
                    <div class="alert alert-info" role="alert">
                        No jobs available at the moment. Please check back later.
                    </div>
                }
            </div>
        </div>

        <!-- Right Sidebar -->
        <div class="col-md-3 border-start p-4">
            <h5 class="mb-4">Filter by Job Type</h5>
            <select class="form-select filter-dropdown" id="job-type-filter">
                <option value="all">All</option>
                @foreach (JobType jobType in Enum.GetValues(typeof(JobType)))
                {
                    <option value="@jobType.ToString().ToLower()">@jobType</option>
                }
            </select>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>

                $(document).ready(function () {
            console.log("Document ready fired");

            // Check if jQuery is loaded
            if (typeof jQuery == 'undefined') {
                console.error("jQuery is not loaded!");
            } else {
                console.log("jQuery version:", $.fn.jquery);
            }

            // Global error handler
            window.onerror = function(message, source, lineno, colno, error) {
                console.error("JavaScript error:", message, "at", source, "line:", lineno);
                return false;
            };

            // Check if jobs exist
            console.log("Number of job cards:", $('.job-card').length);

            // Log all job cards and their data
            $('.job-card').each(function(index) {
                console.log("Job card", index, ":", {
                    id: $(this).data('job-id'),
                    title: $(this).data('job-title'),
                    description: $(this).data('job-description') ? $(this).data('job-description').substring(0, 50) + "..." : "No description"
                });
            });

            // Select the first job by default
            if ($('.job-card').length > 0) {
                console.log("Selecting first job");
                const firstJobCard = $('.job-card').first();
                firstJobCard.addClass('selected-job');
                console.log("First job selected:", firstJobCard.data('job-id'));

                // Update the UI with first job details
                updateJobDetails(firstJobCard);
            }

            // Job card click event with event delegation
            $(document).on('click', '.job-card', function(e) {
                e.preventDefault();
                console.log("Job card clicked:", $(this).data('job-id'));

                // Remove selection from all jobs
                $('.job-card').removeClass('selected-job');

                // Add selection to clicked job
                $(this).addClass('selected-job');

                // Update job details
                updateJobDetails($(this));
            });

            // Apply button click handler
            $(document).on('click', '#applyButton', function(e) {
                e.preventDefault(); // Prevent any default action
                console.log("Apply button clicked");

                var jobId;
                if ($('.selected-job').length > 0) {
                    jobId = parseInt($('.selected-job').data('job-id'));
                    console.log("Selected job ID from class:", jobId);
                } else {
                    jobId = parseInt($(this).data('job-id'));
                    console.log("Selected job ID from button:", jobId);
                }

                if (!jobId || isNaN(jobId)) {
                    console.error("No valid job ID found");
                    alert("Please select a job first");
                    return;
                }

                // Make AJAX call
                var baseUrl = window.location.origin + '/TalentAcquisition/Applicants/ApplyForJob';
                console.log("Making AJAX call to:", baseUrl);

                $.ajax({
                    url: baseUrl,
                    type: 'GET',
                    contentType: 'application/x-www-form-urlencoded',
                    data: { jobId: jobId },
                    success: function (response) {
                        console.log("AJAX success:", response);
                        if (response.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: response.message,
                                confirmButtonText: 'OK'
                            });
                        } else {
                            let alertOptions = {
                                icon: 'error',
                                title: 'Oops...',
                                text: response.message,
                                confirmButtonText: 'OK'
                            };

                            if (response.message === "Applicant not found. Please log in.") {
                                alertOptions.showCancelButton = true;
                                alertOptions.confirmButtonText = 'Login';
                                alertOptions.cancelButtonText = 'Cancel';
                            } else if (response.message === "You have already applied to this job") {
                                alertOptions.icon = 'warning';
                            } else if (response.requiresProfileCompletion) {
                                alertOptions.icon = 'warning';
                                alertOptions.showCancelButton = true;
                                alertOptions.confirmButtonText = 'Complete Profile';
                                alertOptions.cancelButtonText = 'Cancel';

                                // Build missing sections message
                                let missingMessage = "Please complete the following sections:\n";
                                if (response.missingData) {
                                    if (response.missingData.experience) missingMessage += "• Experience\n";
                                    if (response.missingData.skills) missingMessage += "• Skills\n";
                                    if (response.missingData.projects) missingMessage += "• Projects\n";
                                }
                                alertOptions.text = missingMessage;
                                alertOptions.html = missingMessage.replace(/\n/g, '<br>');
                            }

                            Swal.fire(alertOptions).then((result) => {
                                if (result.isConfirmed) {
                                    if (response.message === "Applicant not found. Please log in.") {
                                        window.location.href = '/Identity/Account/Login';
                                    } else if (response.requiresProfileCompletion) {
                                        window.location.href = "https://" + window.location.host + '/Profile/UserInfo';
                                    }
                                }
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("AJAX error:", error);
                        console.log("XHR:", xhr);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: "An error occurred: " + xhr.responseText,
                            confirmButtonText: 'OK'
                        });
                    }
                });
            });

            // Job type filter handler
                   // Job type filter handler
        $('#job-type-filter').on('change', function () {
            const selectedJobType = $(this).val().toLowerCase();
            let visibleJobFound = false;

            // First, toggle visibility of job cards based on the filter
            $('.job-card').each(function () {
                const jobType = $(this).data('job-type').toLowerCase();
                const shouldShow = selectedJobType === 'all' || jobType === selectedJobType;
                $(this).toggle(shouldShow);

                // If this job should be shown and we haven't found a visible job yet,
                // select this one to display in the main content area
                if (shouldShow && !visibleJobFound) {
                    // Remove selection from all jobs
                    $('.job-card').removeClass('selected-job');

                    // Add selection to this job
                    $(this).addClass('selected-job');

                    // Update job details in the main content area
                    updateJobDetails($(this));

                    visibleJobFound = true;
                }
            });

            // If no matching jobs found, display a message
            if (!visibleJobFound) {
                // Clear the job details and show a "no jobs found" message
                $('#job-title').text("No matching jobs");
                $('#description-content').html("<p>No jobs match the selected filter criteria.</p>");
                $('.badge.bg-info').text("0 Applications");
                $('.badge.bg-secondary').text("");
            }
        });
        });

        // Helper function to update job details in the UI
        function updateJobDetails(jobCard) {
            const jobId = jobCard.data('job-id');
            const jobTitle = jobCard.data('job-title');
            const jobDescription = jobCard.data('job-description');
            const jobApplicationCount = jobCard.data('job-application-count') || 0;
            const jobType = jobCard.data('job-type');

            console.log("Updating job details:", {
                jobId, jobTitle, jobApplicationCount, jobType
            });

            $('#job-title').text(jobTitle);
            $('#description-content').html(jobDescription);
            $('.badge.bg-info').text(`${jobApplicationCount} Applications`);
            $('.badge.bg-secondary').text(jobType);
            $('#applyButton').attr('data-job-id', jobId);
        }

    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
                const menu = document.querySelector('.navbar-collapse');
        const hamburgerButton = document.querySelector('.navbar-toggler');

        // Handle hamburger button click
        hamburgerButton.addEventListener('click', function(event) {
            event.stopPropagation();

        // Remove the if condition - we want it to close regardless
        menu.classList.remove('show');
        $(menu).collapse('hide');
                });

        // Handle clicks outside
        document.addEventListener('click', function(event) {
                    if (menu && menu.classList.contains('show')) {
                        if (!menu.contains(event.target) && !hamburgerButton.contains(event.target)) {
            menu.classList.remove('show');
        $(menu).collapse('hide');
                        }
                    }
                });
            });
    </script>
}

<style>
    .selected-job {
        border: 3px solid #8f1412 !important;
        background-color: #ebeada;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

</style>