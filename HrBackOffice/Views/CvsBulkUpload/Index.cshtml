@{
    ViewBag.Title = "Bulk Upload";
}

<div class="container mt-5">
    <div class="row">
        <!-- Upload Card -->
        <div class="col-md-8 mb-4">
            <div class="card shadow-sm">
                <div class="card-header text-white">
                    <h2 class="h4 mb-0">File Upload Center</h2>
                </div>
                <div class="card-body">
                    @if (!ViewBag.IsJobRunning)
                    {
                        <form id="uploadForm">
                            <div class="mb-4">
                                <div class="upload-area p-4 border rounded bg-light text-center">
                                    <i class="bi bi-cloud-upload fs-1 text-primary mb-3 d-block"></i>
                                    <h5>Drag and drop PDF files here</h5>
                                    <p class="text-muted mb-3">or</p>
                                    <div class="position-relative">
                                        <input type="file" class="form-control" id="fileInput" name="files" multiple
                                               accept=".pdf" style="z-index: 2; opacity: 0; position: absolute;">
                                        <button id="BrowseButton" type="button" class="btn btn-outline-primary px-4" onclick="document.getElementById('fileInput').click()">
                                            Browse Files
                                        </button>
                                        <div id="loadingSpinner" class="d-none">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div id="fileList" class="mb-4 d-none">
                                <h6 class="mb-3">Selected Files:</h6>
                                <div class="list-group" id="selectedFiles">
                                    <!-- Files will be listed here dynamically -->
                                </div>
                            </div>

                            <div class="d-flex justify-content-between align-items-center">
                                <button type="submit" class="btn btn-primary px-4">
                                    <i class="bi bi-upload me-2"></i>Upload & Process Files
                                </button>
                            </div>
                        </form>
                    }
                    else{
                        <form id="uploadForm">
                            <div class="mb-4">
                                <div class="upload-area p-4 border rounded bg-light text-center">
                                    <i class="bi bi-cloud-upload fs-1 text-primary mb-3 d-block"></i>
                                    <h5>Drag and drop PDF files here</h5>
                                    <p class="text-muted mb-3">or</p>
                                    <div class="position-relative">
                                        <input type="file" class="form-control" id="fileInput" name="files" multiple
                                               accept=".pdf" style="z-index: 2; opacity: 0; position: absolute;">
                                        <button id="BrowseButton" type="button" class="btn btn-outline-primary px-4 d-none" onclick="document.getElementById('fileInput').click()">
                                            Browse Files
                                        </button>
                                        <div id="loadingSpinner" class="">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div id="fileList" class="mb-4 d-none">
                                <h6 class="mb-3">Selected Files:</h6>
                                <div class="list-group" id="selectedFiles">
                                    <!-- Files will be listed here dynamically -->
                                </div>
                            </div>

                            <div class="d-flex justify-content-between align-items-center">
                                <button type="submit" class="btn btn-primary px-4">
                                    <i class="bi bi-upload me-2 disabled"></i>Upload & Process Files
                                </button>
                            </div>
                        </form>
                    }
                </div>
            </div>
        </div>

        <!-- Processing Status Card -->
        <div class="col-md-4 mb-4">
            <div class="card shadow-sm">
                <div class="card-header bg-info text-white">
                    <h2 class="h4 mb-0">Processing Status</h2>
                </div>
                <div class="card-body">
                    <div class="status-container">
                        <div class="mb-3">
                            <h6>Progress</h6>
                            <div class="progress">
                                <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated"
                                     role="progressbar" style="width: 0%"></div>
                            </div>
                            <small class="text-muted" id="progressText">0 of 0 files processed</small>
                        </div>

                        <div class="status-counts">
                            <div class="row g-2">
                                <div class="col-6">
                                    <div class="p-2 border rounded text-center bg-success text-white">
                                        <div class="h4 mb-0" id="successCount">0</div>
                                        <small>Successful</small>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="p-2 border rounded text-center bg-danger text-white">
                                        <div class="h4 mb-0" id="failedCount">0</div>
                                        <small>Failed</small>
                                    </div>
                                </div>
                                @*<div class="col-12">
                                    <div class="p-2 border rounded text-center bg-warning">
                                        <div class="h4 mb-0" id="needsActionCount">0</div>
                                        <small>Needs Action</small>
                                    </div>
                                </div>*@
                            </div>
                        </div>

                        <div class="mt-3" id="errorContainer" style="display: none;">
                            <h6>Processing Errors</h6>
                            <div class="alert alert-danger" role="alert">
                                <ul class="mb-0" id="errorList"></ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            let isProcessing = false;
            const submitButton = $('button[type="submit"]');
            const loadingSpinner = $('#loadingSpinner');
            const browseButton = $('#BrowseButton');

            // SignalR connection setup
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/processingHub")
                .withAutomaticReconnect()
                .build();

            // Listen for processing updates from SignalR
            connection.on("ReceiveProcessingUpdate", function (status) {
                updateStatus(status);

                // If all files are processed, end the processing state
                if (status.totalFiles > 0 && status.processedFiles >= status.totalFiles) {
                    endProcessing();
                }
            });

            // Start the SignalR connection
            connection.start().catch(function (err) {
                console.error(err.toString());
            });

            function startProcessing() {
                isProcessing = true;
                loadingSpinner.removeClass('d-none');
                browseButton.addClass('d-none');
                submitButton.prop('disabled', true);
            }

            function endProcessing() {
                isProcessing = false;
                loadingSpinner.addClass('d-none');
                browseButton.removeClass('d-none');
                submitButton.prop('disabled', false);
            }

            function updateStatus(status) {
                const progress = status.totalFiles > 0
                    ? (status.processedFiles / status.totalFiles) * 100
                    : 0;

                $('#progressBar').css('width', progress + '%');
                $('#progressText').text(`${status.processedFiles} of ${status.totalFiles} files processed`);
                $('#successCount').text(status.successfulFiles);
                $('#failedCount').text(status.failedFiles);

                if (status.processingErrors && status.processingErrors.length > 0) {
                    $('#errorContainer').show();
                    const errorList = $('#errorList');
                    errorList.empty();
                    status.processingErrors.forEach(error => {
                        errorList.append(`<li>${error}</li>`);
                    });
                } else {
                    $('#errorContainer').hide();
                }
            }

            // File input handling
            const fileInput = $('#fileInput');
            const fileList = $('#fileList');
            const selectedFiles = $('#selectedFiles');

            fileInput.on('change', function () {
                const files = Array.from(this.files);

                if (files.length > 0) {
                    fileList.removeClass('d-none');
                    selectedFiles.empty();

                    files.forEach(file => {
                        const fileSize = (file.size / 1024 / 1024).toFixed(2);
                        const fileItem = `
                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <i class="bi bi-file-earmark-text me-2"></i>
                                    ${file.name}
                                    <small class="text-muted ms-2">${fileSize} MB</small>
                                </div>
                                <button type="button" class="btn btn-sm btn-outline-danger remove-file">
                                    <i class="bi bi-x"></i>
                                </button>
                            </div>`;
                        selectedFiles.append(fileItem);
                    });
                } else {
                    fileList.addClass('d-none');
                }
            });

            // Remove file from selection
            $(document).on('click', '.remove-file', function () {
                $(this).closest('.list-group-item').remove();
                if (selectedFiles.children().length === 0) {
                    fileList.addClass('d-none');
                }
            });

            // Handle form submission
            $('#uploadForm').on('submit', function (e) {
                e.preventDefault(); // Prevent the default form submission

                // Check if already processing
                if (isProcessing) {
                    return;
                }

                // Start processing state - show spinner and disable button
                startProcessing();

                const formData = new FormData(this);

                $.ajax({
                    url: "/CvsBulkUpload/Upload",
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success) {
                            // Reset the form
                            fileList.addClass('d-none');
                            selectedFiles.empty();
                            fileInput.val('');

                            // Note: We don't end processing here because SignalR will handle it
                            // when all files are processed
                        } else {
                            alert('Error: ' + response.message);
                            if(response.message != "A processing job is already running. Please wait until it finishes.")
                                endProcessing(); // End processing on error response
                        }
                    },
                    error: function (xhr, status, error) {
                        alert('Error uploading files. Please try again.');
                        console.error(xhr.responseText);
                        endProcessing(); // End processing on error
                    }
                });
            });
        });
    </script>
}